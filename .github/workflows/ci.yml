name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20'

jobs:
  test:
    name: Test and Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run type checking
        run: npx tsc --noEmit

      - name: Run linting
        run: npm run lint

      - name: Run formatting check
        run: npx prettier --check "src/**/*.ts"

      - name: Run tests
        run: npm run test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          fail_ci_if_error: false

      - name: Build project
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 7

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level moderate

      - name: Run dependency check
        run: npx audit-ci --moderate

  # TODO: Enable these deployment jobs when ready to deploy
  # deploy-staging:
  #   name: Deploy to Staging
  #   runs-on: ubuntu-latest
  #   needs: [test, security]
  #   if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
  #   environment: staging
  #   
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}
  #         cache: 'npm'

  #     - name: Install dependencies
  #       run: npm ci

  #     - name: Build project
  #       run: npm run build

  #     - name: Authenticate to Google Cloud
  #       uses: google-github-actions/auth@v2
  #       with:
  #         credentials_json: ${{ secrets.GCP_SA_KEY_STAGING }}

  #     - name: Set up Cloud SDK
  #       uses: google-github-actions/setup-gcloud@v2

  #     - name: Deploy to staging
  #       run: |
  #         gcloud functions deploy reviewthor-staging \
  #           --gen2 \
  #           --runtime=nodejs20 \
  #           --trigger-http \
  #           --entry-point=reviewthor \
  #           --memory=2GB \
  #           --timeout=540 \
  #           --min-instances=0 \
  #           --max-instances=10 \
  #           --set-env-vars NODE_ENV=staging

  # deploy-production:
  #   name: Deploy to Production
  #   runs-on: ubuntu-latest
  #   needs: [test, security]
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #   environment: production
  #   
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}
  #         cache: 'npm'

  #     - name: Install dependencies
  #       run: npm ci

  #     - name: Build project
  #       run: npm run build

  #     - name: Authenticate to Google Cloud
  #       uses: google-github-actions/auth@v2
  #       with:
  #         credentials_json: ${{ secrets.GCP_SA_KEY_PRODUCTION }}

  #     - name: Set up Cloud SDK
  #       uses: google-github-actions/setup-gcloud@v2

  #     - name: Deploy to production
  #       run: |
  #         gcloud functions deploy reviewthor \
  #           --gen2 \
  #           --runtime=nodejs20 \
  #           --trigger-http \
  #           --entry-point=reviewthor \
  #           --memory=2GB \
  #           --timeout=540 \
  #           --min-instances=1 \
  #           --max-instances=100 \
  #           --set-env-vars NODE_ENV=production